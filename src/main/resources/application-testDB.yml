spring:
  datasource:
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      #url: jdbc:mysql://localhost:3306/store?useServerPrepStmts=true&characterEncoding=utf8&serverTimezone=UTC
      url: jdbc:mysql://16.163.187.45:3306/jira?useServerPrepStmts=true&characterEncoding=utf8&serverTimezone=UTC
      username: jira
      password: jira
      #数据源名称：当存在多个数据源时，设置名字可以很方便的来进行区分,默认自动生成名称，格式是："DataSource-" + System.identityHashCode(this)
      name: druid-db1
      initialSize: 10 #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时,默认0
      maxActive: 200  #最大连接池数量,默认8
      minIdle: 10     #最小连接池数量
      maxWait: 60000  #获取连接时最大等待时间,单位毫秒。配置了maxWait之后,缺省启用公平锁,并发效率会有所下降,如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      timeBetweenEvictionRunsMillis: 60000 #1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据(详细看testWhileIdle属性的说明)
      minEvictableIdleTimeMillis: 300000   #设置连接最小可收回空闲时间(毫秒)，默认为 1000L * 60L * 30L
      maxEvictableIdleTimeMillis: 900000   #设置连接最大可收回空闲时间(毫秒)，默认为 1000L * 60L * 60L * 7
      validationQuery: SELECT 1 FROM DUAL #用来检测连接是否有效的sql,求是一个查询语句。默认为null，此时testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
      testWhileIdle: true #申请连接的时候检测,如果空闲时间大于timeBetweenEvictionRunsMillis,执行validationQuery检测连接是否有效,默认为true
      testOnBorrow: false #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,默认false.
      testOnReturn: false #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,默认false.
      poolPreparedStatements: true #是否缓存preparedStatement,也就是PSCache。PSCache对支持游标的数据库性能提升巨大,比如说oracle,在mysql下建议关闭。
      #要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，
      #在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      maxOpenPreparedStatements: 20
      #连接池中的 minIdle 数量以内的连接，空闲时间超过 minEvictableIdleTimeMillis，则会执行 keepAlive 操作
      keepAlive: true
      maxPoolPreparedStatementPerConnectionSize: 20 #每个连接大小的最大池准备语句数
      useGlobalDataSourceStat: true #是否使用全局数据源统计,默认false
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500 #连接属性
      #配置监控统计的内置过滤器：stat-监控统计(必须配置，否则监控不到sql)、wall-防御sql注入、log4j2-日志记录框架(值与应用中的日志框架保持一致，如 log4j、log4j、logback、slf4j)
      filters: stat,wall,log4j2
  main:
    banner-mode: off
